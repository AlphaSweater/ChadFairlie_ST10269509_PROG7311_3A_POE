@model IEnumerable<WebApp.ViewModels.ProductViewModels.ProductViewModel>

@{
	ViewData["Title"] = "Manage Products";
}
<head>
	<style>
		body {
			background-color: #fbf8f3;
		}

		.text-brown {
			color: #6f4e37;
		}

		.btn-success {
			background-color: #5e8c61;
			border-color: #5e8c61;
		}

			.btn-success:hover {
				background-color: #4e7551;
				border-color: #4e7551;
			}

		.form-label {
			font-weight: 600;
			color: #6f4e37;
		}

		.add-product-btn {
			font-weight: 600;
			padding: 10px 20px;
			border-radius: 8px;
			box-shadow: 0 4px 10px rgba(94, 140, 97, 0.2);
			transition: background-color 0.3s ease, transform 0.2s ease;
			color: white;
			display: inline-flex;
			align-items: center;
			gap: 8px;
		}

			.add-product-btn:hover {
				background-color: #4e7551;
				transform: scale(1.03);
				text-decoration: none;
			}

	</style>
</head>


<div class="container py-4">
	<div class="d-flex justify-content-between align-items-center mb-3">
		<h2 class="text-success fw-bold">🌿 Manage Your Products</h2>
		<a asp-action="AddProduct" asp-controller="Product" class="btn btn-success add-product-btn">
			+ Add New Product
		</a>
	</div>

	<!-- Filter/Search Section -->
	<div class="card shadow-sm border-0 mb-4" style="background-color: #f6f4ef;">
		<div class="card-body">
			<h5 class="mb-3 text-brown">🔍 Filter Products</h5>
			<form id="filter-form" method="get" asp-action="ManageProducts" class="row g-3 align-items-end">
				<div class="col-md-4">
					<label for="searchName" class="form-label">Product Name</label>
					<input type="text" id="searchName" name="searchName" class="form-control" placeholder="e.g. Spinach" value="@ViewData["searchName"]" />
				</div>
				<div class="col-md-3">
					<label for="category" class="form-label">Product Category</label>
					<select id="category" name="category" class="form-select">
						<option value="">All Categories</option>
						<option value="Vegetables">Vegetables</option>
						<option value="Fruits">Fruits</option>
						<option value="Grains">Grains</option>
						<!-- Add more if needed -->
					</select>
				</div>
				<div class="col-md-3">
					<label for="createdDate" class="form-label">Created On</label>
					<input type="date" id="createdDate" name="createdDate" class="form-control" value="@ViewData["createdDate"]" />
				</div>
				<div class="col-md-2 d-flex gap-2">
					<a href="@Url.Action("ManageProducts", "Farmer")" class="btn btn-outline-secondary w-100">Clear</a>
				</div>
			</form>
		</div>
	</div>

	<!-- Product Grid -->
	<div id="product-list" class="row">
		@Html.Partial("_ProductCardList", Model)
	</div>
</div>

<script>
	const filterForm = document.getElementById("filter-form");
	const inputs = filterForm.querySelectorAll("input, select");

	inputs.forEach(input => {
		input.addEventListener("input", debounce(fetchFilteredProducts, 300));
	});

	// Debounce function to limit API calls
	function debounce(func, delay) {
		let timer;
		return function (...args) {
			clearTimeout(timer);
			timer = setTimeout(() => func.apply(this, args), delay);
		};
	}

	// Function to fetch and update the product list
	function fetchFilteredProducts() {
		const formData = new FormData(filterForm);
		const queryString = new URLSearchParams(formData).toString();

		fetch(`/Farmer/GetFilteredProducts?${queryString}`)
			.then(res => res.text())
			.then(html => {
				const productList = document.getElementById("product-list");
				productList.innerHTML = html;
			});
	}

	// Handle the "Clear" button
	document.querySelector(".btn-outline-secondary").addEventListener("click", function (e) {
		e.preventDefault();
		filterForm.reset(); // Reset the form fields
		fetchFilteredProducts(); // Fetch all products
	});
</script>

