@model IEnumerable<WebApp.ViewModels.Farmer.FarmerProductCardViewModel>

@{
	ViewData["Title"] = "Manage Products";
}

<style>
	body {
		background-color: #fbf8f3;
	}

	.text-brown {
		color: #6f4e37;
	}

	.btn-success {
		background-color: #5e8c61;
		border-color: #5e8c61;
	}

		.btn-success:hover {
			background-color: #4e7551;
			border-color: #4e7551;
		}

	.card {
		background-color: #f6f4ef;
		border: none;
		border-radius: 12px;
		box-shadow: 0 4px 20px rgba(0,0,0,0.05);
	}

	.card-img-top {
		height: 180px;
		object-fit: cover;
	}

	.form-label {
		font-weight: 600;
		color: #6f4e37;
	}

	.add-product-btn {
		font-weight: 600;
		padding: 10px 20px;
		border-radius: 8px;
		box-shadow: 0 4px 10px rgba(94, 140, 97, 0.2);
		transition: background-color 0.3s ease, transform 0.2s ease;
		color: white;
		display: inline-flex;
		align-items: center;
		gap: 8px;
	}

		.add-product-btn:hover {
			background-color: #4e7551;
			transform: scale(1.03);
			text-decoration: none;
		}


</style>

<div class="container py-4">
	<div class="d-flex justify-content-between align-items-center mb-3">
		<h2 class="text-success fw-bold">🌿 Manage Your Products</h2>
		<a asp-action="AddProduct" asp-controller="Product" class="btn btn-success add-product-btn">
			+ Add New Product
		</a>
	</div>

	<!-- Filter/Search Section -->
	<div class="card shadow-sm border-0 mb-4" style="background-color: #f6f4ef;">
		<div class="card-body">
			<h5 class="mb-3 text-brown">🔍 Filter Products</h5>
			<form id="filter-form" method="get" asp-action="ManageProducts" class="row g-3 align-items-end">
				<div class="col-md-4">
					<label for="searchName" class="form-label">Product Name</label>
					<input type="text" id="searchName" name="searchName" class="form-control" placeholder="e.g. Spinach" value="@ViewData["searchName"]" />
				</div>
				<div class="col-md-3">
					<label for="category" class="form-label">Product Category</label>
					<select id="category" name="category" class="form-select">
						<option value="">All Categories</option>
						<option value="Vegetables">Vegetables</option>
						<option value="Fruits">Fruits</option>
						<option value="Grains">Grains</option>
						<!-- Add more if needed -->
					</select>
				</div>
				<div class="col-md-3">
					<label for="createdDate" class="form-label">Created On</label>
					<input type="date" id="createdDate" name="createdDate" class="form-control" value="@ViewData["createdDate"]" />
				</div>
				<div class="col-md-2 d-flex gap-2">
					<a href="@Url.Action("ManageProducts", "Farmer")" class="btn btn-outline-secondary w-100">Clear</a>
				</div>
			</form>
		</div>
	</div>

	<!-- Product Cards -->
	<div id="product-list" class="row">
		@if (Model.Any())
		{
			foreach (var product in Model)
			{
				<div class="col-md-4 mb-4">
					<div class="card h-100 shadow-sm border-0" style="background-color: #fbf8f3;">
						@if (product.Image != null && product.Image.Length > 0)
						{
							var base64Image = Convert.ToBase64String(product.Image);
							<img src="data:image/jpeg;base64,@base64Image" class="card-img-top" alt="Product Image" />
						}
						else
						{
							<img src="~/images/placeholder.png" class="card-img-top" alt="No Image Available" />
						}

						<div class="card-body">
							<h5 class="card-title text-success">@product.Name</h5>
							<p class="card-text"><strong>Category:</strong> @product.Category</p>
							<p class="card-text"><strong>Price:</strong> R @product.Price.ToString("0.00")</p>
							<p class="card-text text-muted">
								<small>Created: @(product.CreatedOn?.ToString("yyyy-MM-dd") ?? "N/A")</small>
							</p>
						</div>
						<div class="card-footer bg-transparent border-0 d-flex justify-content-between">
							<a asp-action="Edit" asp-route-id="@product.ProductId" class="btn btn-sm btn-outline-success">Edit</a>
							<a asp-action="Delete" asp-route-id="@product.ProductId" class="btn btn-sm btn-outline-danger">Delete</a>
						</div>
					</div>
				</div>
			}
		}
		else
		{
			<div class="col-12">
				<div class="alert alert-info text-center">
					No products found matching your filters.
				</div>
			</div>
		}
	</div>
</div>

<script>
	// Debounce function to limit API calls
	function debounce(func, delay) {
		let timer;
		return function (...args) {
			clearTimeout(timer);
			timer = setTimeout(() => func.apply(this, args), delay);
		};
	}

	// Function to fetch and update the product list
	function fetchFilteredProducts() {
		const formData = new FormData(document.getElementById("filter-form"));
		const queryString = new URLSearchParams(formData).toString();

		fetch(`/Farmer/GetFilteredProducts?${queryString}`)
			.then(response => response.json())
			.then(data => {
				const productList = document.getElementById("product-list");
				productList.innerHTML = ""; // Clear existing products

				if (data.length === 0) {
					productList.innerHTML = `
							<div class="col-12">
								<div class="alert alert-info text-center">
									No products found matching your filters.
								</div>
							</div>`;
					return;
				}

				data.forEach(product => {
					const productCard = `
							<div class="col-md-4 mb-4">
								<div class="card h-100 shadow-sm">
									${product.image ? `<img src="data:image/jpeg;base64,${product.image}" class="card-img-top" alt="Product Image" />` : `<img src="/images/placeholder.png" class="card-img-top" alt="No Image Available" />`}
									<div class="card-body">
										<h5 class="card-title">${product.name}</h5>
										<p class="card-text"><strong>Category:</strong> ${product.category}</p>
										<p class="card-text"><strong>Price:</strong> R ${product.price.toFixed(2)}</p>
										<p class="card-text text-muted">
											<small>Created: ${product.createdOn ? new Date(product.createdOn).toLocaleDateString() : "N/A"}</small>
										</p>
									</div>
									<div class="card-footer d-flex justify-content-between">
										<a href="/Farmer/Edit/${product.productId}" class="btn btn-sm btn-outline-primary">Edit</a>
										<a href="/Farmer/Delete/${product.productId}" class="btn btn-sm btn-outline-danger">Delete</a>
									</div>
								</div>
							</div>`;
					productList.insertAdjacentHTML("beforeend", productCard);
				});
			});
	}

	// Attach event listeners for live filtering
	const filterForm = document.getElementById("filter-form");
	const inputs = filterForm.querySelectorAll("input, select");

	inputs.forEach(input => {
		input.addEventListener("input", debounce(fetchFilteredProducts, 300));
	});

	// Handle the "Clear" button
	document.querySelector(".btn-outline-secondary").addEventListener("click", function (e) {
		e.preventDefault();
		filterForm.reset(); // Reset the form fields
		fetchFilteredProducts(); // Fetch all products
	});
</script>

