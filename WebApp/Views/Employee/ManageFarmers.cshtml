@model IEnumerable<WebApp.ViewModels.EmployeeViewModels.FarmerViewModel>

@{
	ViewData["Title"] = "Manage Farmers";
}

<style>
	body {
		background-color: #fbf8f3;
	}

	.text-brown {
		color: #6f4e37;
	}

	.btn-success {
		background-color: #5e8c61;
		border-color: #5e8c61;
	}

		.btn-success:hover {
			background-color: #4e7551;
			border-color: #4e7551;
		}

	.card {
		background-color: #f6f4ef;
		border-radius: 12px;
		box-shadow: 0 4px 20px rgba(0,0,0,0.05);
	}

	.form-label {
		font-weight: 600;
		color: #6f4e37;
	}

	.add-farmer-btn {
		font-weight: 600;
		padding: 10px 20px;
		border-radius: 8px;
		color: white;
		box-shadow: 0 4px 10px rgba(94, 140, 97, 0.2);
		transition: background-color 0.3s ease, transform 0.2s ease;
	}

		.add-farmer-btn:hover {
			background-color: #4e7551;
			transform: scale(1.03);
			text-decoration: none;
		}
</style>

<div class="container py-4">
	<div class="d-flex justify-content-between align-items-center mb-3">
		<h2 class="text-success fw-bold">👩‍🌾 Manage Farmers</h2>
		<a asp-action="AddFarmer" asp-controller="Employee" class="btn btn-success add-farmer-btn">+ Add New Farmer</a>
	</div>

	<!-- Filter/Search -->
	<div class="card shadow-sm mb-4">
		<div class="card-body">
			<h5 class="mb-3 text-brown">🔍 Filter Products</h5>
			<form id="filter-form" method="get" asp-action="ManageFarmers" class="row g-3 justify-content-between">
				<div class="col-md-6 col-lg-4">
					<label for="searchName" class="form-label">Search by Name or Email</label>
					<input type="text" id="searchName" name="searchName" class="form-control border-start-0" value="@ViewData["searchName"]" placeholder="e.g. Sarah or sarah@email.com" />
				</div>

				<div class="col-md-4 col-lg-4 align-content-end">
					<label for="createdByMe" class="form-label">Only Show Created by Me  </label>
					<input type="checkbox" id="createdByMe" name="createdByMe" class="form-check-input" />
				</div>

				<div class="col-md-2 col-lg-2 d-flex align-items-end justify-content-end">
					<a href="@Url.Action("ManageFarmers", "Farmer")" class="btn btn-outline-secondary w-100">Clear</a>
				</div>
			</form>
		</div>
	</div>


	<!-- Farmer Cards -->
	<div id="farmer-list">
		@Html.Partial("_FarmerCardList", Model)
	</div>
</div>

<script>
	const filterForm = document.getElementById("filter-form");
	const inputs = filterForm.querySelectorAll("input");

	inputs.forEach(input => {
		input.addEventListener("input", debounce(fetchFilteredFarmers, 300));
	});

	function debounce(func, delay) {
		let timer;
		return function (...args) {
			clearTimeout(timer);
			timer = setTimeout(() => func.apply(this, args), delay);
		};
	}

	function fetchFilteredFarmers() {
		const formData = new FormData(filterForm);
		const queryString = new URLSearchParams(formData).toString();

		fetch(`/Employee/GetFilteredFarmers?${queryString}`)
			.then(res => res.text())
			.then(html => {
				const farmerList = document.getElementById("farmer-list");
				farmerList.innerHTML = html;
			});
	}

	// Handle the "Clear" button
	document.querySelector(".btn-outline-secondary").addEventListener("click", function (e) {
		e.preventDefault();
		filterForm.reset();
		fetchFilteredFarmers()// Reset the form fields
	});
</script>
