@model WebApp.ViewModels.ProductViewModels.ProductViewModel

<style>
	/* From Uiverse.io by alexmaracinaru */
	.product-card {
		width: 100%;
		max-width: 250px;
		background: white;
		padding: .4em;
		border-radius: 6px;
		box-shadow: 0 4px 6px rgba(0,0,0,0.1);
		display: inline-block;
	}

	.product-card-image {
		background-color: rgb(236, 236, 236);
		width: 100%;
		height: 130px;
		border-radius: 6px 6px 0 0;
		overflow: hidden;
		display: flex;
		align-items: center;
		justify-content: center;
	}

		.product-card-image img {
			max-height: 100%;
			width: auto;
			object-fit: contain;
		}

		.product-card-image:hover {
			transform: scale(0.98);
		}

	.product-card-category {
		text-transform: uppercase;
		font-size: 0.7em;
		font-weight: 600;
		color: rgb(63, 121, 230);
		padding: 10px 7px 0;
	}

		.product-card-category:hover {
			cursor: pointer;
		}

	.product-card-heading {
		font-weight: 600;
		color: rgb(88, 87, 87);
		padding: 7px;
		font-size: 0.95em;
	}

		.product-card-heading:hover {
			cursor: pointer;
		}

	.product-card-author {
		color: gray;
		font-weight: 400;
		font-size: 11px;
		padding: 0 7px 7px;
	}

	.product-card-name-price {
		display: flex;
		justify-content: space-between;
		align-items: center;
	}

	.product-card-name {
		flex: 1;
		font-weight: 600;
		word-wrap: break-word;
		overflow-wrap: break-word;
	}

		.product-card-name:hover {
			cursor: pointer;
		}

	.product-card-price {
		font-weight: 600;
		color: rgb(63, 121, 230);
		margin-left: 10px;
		white-space: nowrap;
	}

	.product-card-actions {
		display: flex;
		justify-content: space-between;
		padding: 0.5em 0.6em;
	}

		.product-card-actions a {
			font-size: 0.8em;
		}
</style>

<div class="product-card">
	<div class="product-card-image">
		@if (Model.Image != null && Model.Image.Length > 0)
		{
			var base64Image = Convert.ToBase64String(Model.Image);
			<img src="data:image/jpeg;base64,@base64Image" alt="Product Image" />
		}
		else
		{
			<img src="~/images/placeholder.png" alt="No Image Available" />
		}
	</div>

	<div class="product-card-category">@Model.Category</div>

	<div class="product-card-heading">
		<div class="product-card-name-price">
			<span class="product-card-name">@Model.Name</span>
			<span class="product-card-price">R @Model.Price.ToString("0.00")</span>
		</div>
		<div class="product-card-author">
			Created By <span class="product-card-name">@Model.CreatedBy.FullName</span>
			<br />
			Created On: @(Model.CreatedOn?.ToString("yyyy-MM-dd") ?? "N/A")
		</div>
	</div>

	@* <div class="product-card-actions">
		<form asp-controller="Product" asp-action="EditProduct" method="post" class="d-inline">
			<input type="hidden" name="ProductId" value="@Model.ProductId" />
			<button type="submit" class="btn btn-sm btn-outline-success">Edit</button>
		</form>
		<form asp-controller="Product" asp-action="DeleteProduct" method="post" class="d-inline delete-product-form">
			<input type="hidden" name="ProductId" value="@Model.ProductId" />
			<button type="button" class="btn btn-sm btn-outline-danger delete-product-btn">Delete</button>
		</form>
	</div> *@
</div>

<script>
	document.addEventListener('click', function (e) {
		if (e.target && e.target.classList.contains('delete-product-btn')) {
			e.preventDefault();

			const form = e.target.closest('.delete-product-form');
			Swal.fire({
				title: 'Are you sure?',
				text: "You won't be able to revert this!",
				icon: 'warning',
				showCancelButton: true,
				confirmButtonColor: '#d33',
				cancelButtonColor: '#3085d6',
				confirmButtonText: 'Yes, delete it!'
			}).then((result) => {
				if (result.isConfirmed) {
					form.submit();
				}
			});
		}
	});
</script>